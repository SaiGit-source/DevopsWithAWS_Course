Shell Scripting part 2

Write a shell script to check if given number is prime or not
Write a shell script to check given number is even or odd
Write a shell script to check given string is palindrome or not

[ec2-user@ip-172-31-13-80 ~]$ cat primeCheck.sh
#! /bin/bash

echo "Enter number: "

read NUM
flag=0

for (( i=2; i<$NUM; i++));
  do
          if [ $((NUM % i)) -eq 0 ]; then

          echo "Not a Prime"
          flag=1
          break
          fi
  done

  if [ $flag -eq 0 ]; then

        echo "Prime"
  fi



[ec2-user@ip-172-31-13-80 ~]$ sh primeCheck.sh
Enter number:
12
Not a Prime


[ec2-user@ip-172-31-13-80 ~]$ sh primeCheck.sh
Enter number:
23
Prime


Command line arguments are used to supply or pass values to the script file at the time of execution

# => Total number of arguments passed
$0 => get the script file
$1 => read the first data cmd line argument
$2 => read the second cmd line args
$* => Read all cmd args
cmd args => Data passing to script file

[ec2-user@ip-172-31-13-80 ~]$ cat cmd_args.sh
#! /bin/bash

echo "Total Args/Info passed : $#"

echo "Script filename : $0"

echo "First command line args: $1"

echo "Second command line args : $2"

echo "All command line args : $*"



[ec2-user@ip-172-31-13-80 ~]$ sh cmd_args.sh Udemy DevOps learning
Total Args/Info passed : 3
Script filename : cmd_args.sh
First command line args: Udemy
Second command line args : DevOps
All command line args : Udemy DevOps learning

[ec2-user@ip-172-31-13-80 ~]$ cat cmd_args_1
#! /bin/bash

RESULT=$(($1+$2))

echo "Sum of data passed is  $RESULT"


[ec2-user@ip-172-31-13-80 ~]$ sh cmd_args_1 2 3
Sum of data passed is  5

Adding comments

[ec2-user@ip-172-31-13-80 ~]$ cat cmd_args
#! /bin/bash

# To get the total number of args
echo "Total Args/Info passed : $#"

# To get the script filename
echo "Script filename : $0"

echo "First command line args: $1"

echo "Second command line args : $2"

echo "All command line args : $*"

Comments are used to provide metadata about our scripts and commands
By looking at comments anyone can easily understand our scripts
# is used to write single line comments

Multiline comments: 
<<COMMENT
this is multi line in scripting
COMMENT

[ec2-user@ip-172-31-13-80 ~]$ date
Sat Mar  1 23:02:10 UTC 2025

[ec2-user@ip-172-31-13-80 ~]$ date > alien_date.txt
[ec2-user@ip-172-31-13-80 ~]$ cat alien_date.txt
Sat Mar  1 23:03:01 UTC 2025

Redirect output to a log file can be achieved using > or >> operators
[ec2-user@ip-172-31-13-80 ~]$ pwd >> alien_date.txt
[ec2-user@ip-172-31-13-80 ~]$ cat alien_date.txt
Sat Mar  1 23:03:01 UTC 2025
/home/ec2-user


[ec2-user@ip-172-31-13-80 ~]$ mkdirs newdir &> error.log
[ec2-user@ip-172-31-13-80 ~]$ cat error.log
-bash: mkdirs: command not found

[ec2-user@ip-172-31-13-80 ~]$ cat log-file.sh
#! /bin/bash

# Define log file path
LOG_FILE=myapp.log

#function to log messages

log_message(){
        local timestamp=$(date +"%Y-%m-%d %T")
        local message=$1
        echo "[$timestamp] $message" >> $LOG_FILE
}

# Call log function
log_message "Script Execution Started"

echo "This is something regular message - 01"
echo "This is something regular message - 02"

# Simulate error
mkdirs java

# call log function once again

log_message "Script Execution Completed"


[ec2-user@ip-172-31-13-80 ~]$ sh log-file.sh
This is something regular message - 01
This is something regular message - 02
log-file.sh: line 21: mkdirs: command not found
[ec2-user@ip-172-31-13-80 ~]$


[ec2-user@ip-172-31-13-80 ~]$ ls -l
-rw-r--r--. 1 ec2-user ec2-user   33 Mar  1 23:08 error.log
-rw-r--r--. 1 ec2-user ec2-user  462 Mar  1 23:21 log-file.sh
-rw-r--r--. 1 ec2-user ec2-user  308 Mar  1 23:22 myapp.log
-rw-r--r--. 1 ec2-user ec2-user  236 Mar  1 22:20 primeCheck.sh


[ec2-user@ip-172-31-13-80 ~]$ cat log-file.sh
#! /bin/bash

# Define log file path
LOG_FILE=myapp.log

# redirect error messages to  log file
# 2 means only error messages
exec 2>> $LOG_FILE

#function to log messages

log_message(){
        local timestamp=$(date +"%Y-%m-%d %T")
        local message=$1
        echo "[$timestamp] $message" >> $LOG_FILE
}

# Call log function
log_message "Script Execution Started"

echo "This is something regular message - 01"
echo "This is something regular message - 02"

# Simulate error
mkdirs java
ls abcd

# call log function once again

log_message "Script Execution Completed"


now errors are also printed inside myapp.log

[ec2-user@ip-172-31-13-80 ~]$ cat myapp.log
[] Script Execution Started
[] Script Execution Completed
[] Script Execution Started
[] Script Execution Completed
[2025-03-01 23:21:45] Script Execution Started
[2025-03-01 23:21:45] Script Execution Completed
[2025-03-01 23:22:10] Script Execution Started
[2025-03-01 23:22:10] Script Execution Completed
[2025-03-01 23:34:00] Script Execution Started
[2025-03-01 23:34:00] Script Execution Completed
[2025-03-01 23:44:39] Script Execution Started
log-file.sh: line 25: mkdirs: command not found
ls: cannot access 'abcd': No such file or directory
[2025-03-01 23:44:39] Script Execution Completed
[2025-03-01 23:46:21] Script Execution Started
log-file.sh: line 25: mkdirs: command not found
ls: cannot access 'abcd': No such file or directory
[2025-03-01 23:46:21] Script Execution Completed


[ec2-user@ip-172-31-13-80 ~]$ rm myapp.log
[ec2-user@ip-172-31-13-80 ~]$ sh log-file.sh
This is something regular message - 01
This is something regular message - 02

[ec2-user@ip-172-31-13-80 ~]$ cat myapp.log
[2025-03-01 23:48:38] Script Execution Started
log-file.sh: line 25: mkdirs: command not found
ls: cannot access 'abcd': No such file or directory
[2025-03-01 23:48:38] Script Execution Completed


# redirect error messages to  log file
# 2 means only error messages
exec 2>> $LOG_FILE


$1 means only stdout
$2 means only stderr

Write a Shellscript to print system information

[ec2-user@ip-172-31-13-80 ~]$ vi sys-info.sh
[ec2-user@ip-172-31-13-80 ~]$ cat sys-info.sh
#! /bin/bash

# this Script is used to print System information
#
# Display current Date and Time

echo "Date & Time : $(date)"

# Display hostname of the system
echo "Hostname : $(hostname)"

# Display uptime of System
echo "System Uptime : $(uptime)"


# Display Disk usage
echo "Disk usage: $(df -h)"


# Display memory usage
echo "Memory usage : $(free -h)"


[ec2-user@ip-172-31-13-80 ~]$ sh sys-info.sh
Date & Time : Sun Mar  2 00:55:53 UTC 2025
Hostname : ip-172-31-13-80.ca-central-1.compute.internal
System Uptime :  00:55:53 up  3:31,  1 user,  load average: 0.00, 0.00, 0.00
Disk usage: Filesystem      Size  Used Avail Use% Mounted on
devtmpfs        4.0M     0  4.0M   0% /dev
tmpfs           475M     0  475M   0% /dev/shm
tmpfs           190M  444K  190M   1% /run
/dev/xvda1      8.0G  1.7G  6.4G  21% /
tmpfs           475M     0  475M   0% /tmp
/dev/xvda128     10M  1.3M  8.7M  13% /boot/efi
tmpfs            95M     0   95M   0% /run/user/1000
Memory usage :                total        used        free      shared  buff/cache   available
Mem:           949Mi       126Mi       618Mi       0.0Ki       204Mi       686Mi
Swap:             0B          0B          0B








































